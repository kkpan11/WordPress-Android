import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kapt)
    alias(libs.plugins.ksp)
    alias(libs.plugins.room)
    alias(libs.plugins.kotlinx.kover)
}

android {
    useLibrary 'org.apache.http.legacy'

    namespace "org.wordpress.android.fluxc"

    defaultConfig {
        compileSdk rootProject.compileSdkVersion
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        room {
            schemaDirectory "$projectDir/schemas"
        }
        consumerProguardFiles 'consumer-rules.pro'

        // Copy `developer.properties-example` to `developer.properties` and fill in the values
        loadDeveloperProperties(
                project.file("developer.properties-example"),
                project.file("developer.properties")
        ).each { fieldName, propertyKey ->
            buildConfigField "Boolean", fieldName, "$propertyKey"
        }
    }

    compileOptions {
        sourceCompatibility JvmTarget.fromTarget(libs.versions.java.get()).target
        targetCompatibility JvmTarget.fromTarget(libs.versions.java.get()).target
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    buildFeatures {
        buildConfig true
    }
}

static def loadDeveloperProperties(File defaultsFile, File developerFile) {
    File fileToLoad = developerFile.exists() ? developerFile : defaultsFile
    return loadPropertiesFromFile(fileToLoad)
}

static def loadPropertiesFromFile(File inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        allWarningsAsErrors = false
    }
}

dependencies {
    implementation libs.androidx.exifinterface
    implementation libs.androidx.security.crypto

    implementation(libs.wordpress.utils) {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    // Custom WellSql version
    api libs.wellsql
    kapt libs.wellsql.processor

    // FluxC annotations
    api project(":libs:fluxc-annotations")
    kapt project(":libs:fluxc-processor")

    // External libs
    api libs.greenrobot.eventbus.main
    api libs.greenrobot.eventbus.java
    api libs.squareup.okhttp3
    implementation libs.squareup.okhttp3.urlconnection
    api libs.android.volley
    implementation libs.google.gson

    implementation libs.apache.commons.text
    api libs.androidx.paging.runtime
    implementation libs.androidx.room.runtime
    ksp libs.androidx.room.compiler
    implementation libs.androidx.room.ktx

    // Dagger
    implementation libs.google.dagger
    ksp libs.google.dagger.compiler

    // Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    // Encrypted Logging
    api(libs.terl.lazysodium.android.get().toString()) // TODO: https://github.com/gradle/gradle/issues/21267
    api(libs.jna.get().toString()) // TODO: https://github.com/gradle/gradle/issues/21267

    // Unit tests
    testImplementation libs.junit
    testImplementation libs.kotlin.test.junit
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.test.core
    testImplementation libs.robolectric
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.assertj.core
    testImplementation libs.androidx.arch.core.testing

    lintChecks libs.wordpress.lint
}

dependencyAnalysis {
    issues {
        onUnusedDependencies {
            // This dependency is actually needed otherwise the app will crash with a runtime exception.
            exclude(libs.greenrobot.eventbus.main.get().module.toString())
        }
    }
}
