import com.automattic.android.measure.reporters.InternalA8cCiReporter
import com.automattic.android.measure.reporters.SlowSlowTasksMetricsReporter
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.detekt)
    alias(libs.plugins.automattic.measure.builds)
    alias(libs.plugins.kotlinx.kover)
    alias(libs.plugins.dependency.analysis)
    alias(libs.plugins.androidx.navigation.safeargs).apply(false)
    alias(libs.plugins.android.application).apply(false)
    alias(libs.plugins.android.library).apply(false)
    alias(libs.plugins.google.services).apply(false)
    alias(libs.plugins.kotlin.allopen).apply(false)
    alias(libs.plugins.kotlin.android).apply(false)
    alias(libs.plugins.kotlin.compose).apply(false)
    alias(libs.plugins.kotlin.jvm).apply(false)
    alias(libs.plugins.kotlin.parcelize).apply(false)
    alias(libs.plugins.kotlin.serialization).apply(false)
    alias(libs.plugins.ksp).apply(false)
    alias(libs.plugins.kapt).apply(false)
    alias(libs.plugins.room).apply(false)
}

ext {
    minSdkVersion = 26
    compileSdkVersion = 35
    targetSdkVersion = 35

    secretProperties = loadSecrets(
            logger,
            file("${rootDir}/defaults.properties"),
            file("${System.getProperty("user.home")}/.configure/wordpress-android/secrets/secrets.properties")
    )
}

static def loadSecrets(Logger logger, File defaultsFile, File secretsFile) {
    if (secretsFile.exists()) {
        return loadPropertiesFromFile(secretsFile)
    } else {
        logger.warn("Secrets file not found. Using defaults.")
        return loadPropertiesFromFile(defaultsFile)
    }
}

static def loadPropertiesFromFile(File inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

measureBuilds {
    enable = secretProperties.get('measureBuildsEnabled')?.toBoolean() ?: false
    onBuildMetricsReadyListener { report ->
        SlowSlowTasksMetricsReporter.report(report)
        InternalA8cCiReporter.reportBlocking(
                report,
                "wordpress",
                secretProperties.get('appsMetricsToken')
        )
    }
    attachGradleScanId = gradle.ext.isCi
}

allprojects {
    apply plugin: libs.plugins.checkstyle.get().pluginId
    apply plugin: libs.plugins.detekt.get().pluginId

    tasks.register("checkstyle", Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = libs.plugins.checkstyle.get().version
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }

    detekt {
        toolVersion = libs.plugins.detekt.get().version
        baseline = file("${project.rootDir}/config/detekt/baseline.xml")
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        autoCorrect = false
        buildUponDefaultConfig = true
        disableDefaultRuleSets = false
        ignoreFailures = false
        parallel = true
        debug = false
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JvmTarget.fromTarget(libs.versions.java.get()).target
            allWarningsAsErrors = true
            freeCompilerArgs += [
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xjvm-default=all"
            ]
        }
    }
}

dependencies {
    detektPlugins(libs.detekt.formatting)
}

apply from: './config/gradle/code_coverage.gradle'
